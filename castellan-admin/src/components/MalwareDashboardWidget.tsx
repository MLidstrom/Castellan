import React, { useState, useEffect } from 'react';
import {
  Card,
  CardContent,
  CardHeader,
  Typography,
  Box,
  Button,
  Chip,
  LinearProgress,
  CircularProgress,
  IconButton,
  Tooltip,
  Divider,
  Grid,
} from '@mui/material';
import {
  Security as YaraIcon,
  CheckCircle as ValidIcon,
  Error as InvalidIcon,
  PlayArrow as ScanIcon,
  Refresh as RefreshIcon,
  Analytics as AnalyticsIcon,
  Monitor as HealthIcon,
  Warning as WarningIcon,
  TrendingUp as TrendingUpIcon,
  BugReport as FalsePositiveIcon,
  Assessment as StatsIcon,
  OpenInNew as OpenIcon,
} from '@mui/icons-material';
import { useDataProvider, useNotify } from 'react-admin';

// Type interfaces
interface YaraStatistics {
  totalRules: number;
  enabledRules: number;
  disabledRules: number;
  validRules: number;
  invalidRules: number;
  totalMatches: number;
  recentMatches: number;
  averageExecutionTime: number;
  topPerformingRules: Array<{
    ruleId: string;
    ruleName: string;
    effectivenessScore: number;
    hitCount: number;
  }>;
  falsePositives: number;
  compilationErrors: number;
}

interface YaraHealthStatus {
  engineStatus: 'healthy' | 'warning' | 'error';
  compilationHealth: number;
  lastRuleUpdate: string;
  activeScans: number;
  systemLoad: number;
  warnings: string[];
}

export const MalwareDashboardWidget = () => {
  const [statistics, setStatistics] = useState<YaraStatistics | null>(null);
  const [healthStatus, setHealthStatus] = useState<YaraHealthStatus | null>(null);
  const [loading, setLoading] = useState(true);
  const [lastRefresh, setLastRefresh] = useState(new Date());
  
  const dataProvider = useDataProvider();
  const notify = useNotify();

  const loadYaraData = async () => {
    setLoading(true);
    try {
      // Load YARA rules list to calculate statistics
      const rulesResponse = await dataProvider.getList('yara-rules', {
        pagination: { page: 1, perPage: 1000 },
        sort: { field: 'createdAt', order: 'DESC' },
        filter: {}
      });
      
      const rules = rulesResponse.data;
      
      // Calculate statistics from rules data
      const totalRules = rules.length;
      const enabledRules = rules.filter(r => r.isEnabled).length;
      const disabledRules = totalRules - enabledRules;
      const validRules = rules.filter(r => r.isValid).length;
      const invalidRules = totalRules - validRules;
      const totalMatches = rules.reduce((sum, r) => sum + (r.hitCount || 0), 0);
      const falsePositives = rules.reduce((sum, r) => sum + (r.falsePositiveCount || 0), 0);
      const averageExecutionTime = rules.length > 0 
        ? rules.reduce((sum, r) => sum + (r.averageExecutionTimeMs || 0), 0) / rules.length 
        : 0;
      
      // Get top performing rules
      const topPerformingRules = rules
        .filter(r => r.hitCount > 0)
        .sort((a, b) => (b.hitCount || 0) - (a.hitCount || 0))
        .slice(0, 5)
        .map(r => ({
          ruleId: r.id,
          ruleName: r.name,
          effectivenessScore: r.hitCount > 0 ? ((r.hitCount - (r.falsePositiveCount || 0)) / r.hitCount) * 100 : 0,
          hitCount: r.hitCount || 0
        }));
      
      setStatistics({
        totalRules,
        enabledRules,
        disabledRules,
        validRules,
        invalidRules,
        totalMatches,
        recentMatches: totalMatches, // For now, same as total
        averageExecutionTime,
        topPerformingRules,
        falsePositives,
        compilationErrors: invalidRules
      });

      // Load YARA service status for health information - use correct API URL
      const authToken = localStorage.getItem('auth_token');
      const statusResponse = await fetch('http://localhost:5000/api/yara-rules/status', {
        headers: {
          'Authorization': `Bearer ${authToken}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (!statusResponse.ok) {
        throw new Error(`Status API failed: ${statusResponse.status}`);
      }
      
      const status = await statusResponse.json();
      
      // Create health status from service status
      const engineStatus = status.isHealthy ? 'healthy' : (status.error ? 'error' : 'warning');
      const warnings = [];
      
      if (!status.isHealthy) {
        warnings.push('YARA service is not healthy');
      }
      if (status.error) {
        warnings.push(status.error);
      }
      if (invalidRules > 0) {
        warnings.push(`${invalidRules} rules have compilation errors`);
      }
      
      setHealthStatus({
        engineStatus,
        compilationHealth: validRules > 0 ? (validRules / totalRules) * 100 : 0,
        lastRuleUpdate: rules.length > 0 ? rules[0].updatedAt : new Date().toISOString(),
        activeScans: 0, // Not available from current API
        systemLoad: 0, // Not available from current API
        warnings
      });

      setLastRefresh(new Date());
    } catch (error: any) {
      console.error('Failed to load YARA data:', error);
      notify('Failed to load YARA dashboard data', { type: 'error' });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadYaraData();
    // Refresh every 30 seconds
    const interval = setInterval(loadYaraData, 30000);
    return () => clearInterval(interval);
  }, []);

  const getHealthColor = (status: string) => {
    switch (status) {
      case 'healthy': return 'success';
      case 'warning': return 'warning';
      case 'error': return 'error';
      default: return 'default';
    }
  };

  const getValidationPercentage = () => {
    if (!statistics) return 0;
    return (statistics.validRules / statistics.totalRules) * 100;
  };

  const getEnabledPercentage = () => {
    if (!statistics) return 0;
    return (statistics.enabledRules / statistics.totalRules) * 100;
  };

  if (loading && !statistics) {
    return (
      <Card>
        <CardHeader 
          title="YARA Rule Engine"
          avatar={<YaraIcon color="primary" />}
        />
        <CardContent>
          <Box display="flex" justifyContent="center" alignItems="center" minHeight={200}>
            <CircularProgress />
          </Box>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader 
        title="YARA Rule Engine"
        avatar={<YaraIcon color="primary" />}
        action={
          <Box display="flex" gap={1}>
            <Tooltip title={`Last updated: ${lastRefresh.toLocaleTimeString()}`}>
              <IconButton onClick={loadYaraData} disabled={loading} size="small">
                {loading ? <CircularProgress size={16} /> : <RefreshIcon />}
              </IconButton>
            </Tooltip>
            <Tooltip title="View YARA Rules">
              <IconButton 
                onClick={() => window.location.href = '#/yara-rules'} 
                size="small"
              >
                <OpenIcon />
              </IconButton>
            </Tooltip>
          </Box>
        }
      />
      <CardContent>
        {statistics && healthStatus ? (
          <>
            {/* Status Summary */}
            <Grid container spacing={2} sx={{ mb: 3 }}>
              <Grid item xs={12} sm={6} md={3}>
                <Box textAlign="center" p={1} bgcolor="rgba(33, 150, 243, 0.1)" borderRadius={1}>
                  <Typography variant="h4" color="info.main">
                    {statistics.totalRules}
                  </Typography>
                  <Typography variant="caption">Total Rules</Typography>
                </Box>
              </Grid>
              <Grid item xs={12} sm={6} md={3}>
                <Box textAlign="center" p={1} bgcolor="rgba(76, 175, 80, 0.1)" borderRadius={1}>
                  <Typography variant="h4" color="success.main">
                    {statistics.enabledRules}
                  </Typography>
                  <Typography variant="caption">Enabled</Typography>
                </Box>
              </Grid>
              <Grid item xs={12} sm={6} md={3}>
                <Box textAlign="center" p={1} bgcolor="rgba(255, 152, 0, 0.1)" borderRadius={1}>
                  <Typography variant="h4" color="warning.main">
                    {statistics.totalMatches}
                  </Typography>
                  <Typography variant="caption">Total Matches</Typography>
                </Box>
              </Grid>
              <Grid item xs={12} sm={6} md={3}>
                <Box textAlign="center" p={1} bgcolor="rgba(244, 67, 54, 0.1)" borderRadius={1}>
                  <Typography variant="h4" color="error.main">
                    {statistics.falsePositives}
                  </Typography>
                  <Typography variant="caption">False Positives</Typography>
                </Box>
              </Grid>
            </Grid>

            {/* Health Status and Progress Bars */}
            <Box mb={3}>
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                <Typography variant="subtitle2" display="flex" alignItems="center" gap={1}>
                  <HealthIcon fontSize="small" />
                  Engine Status
                </Typography>
                <Chip 
                  label={healthStatus.engineStatus}
                  color={getHealthColor(healthStatus.engineStatus) as any}
                  size="small"
                  icon={healthStatus.engineStatus === 'healthy' ? <ValidIcon /> : <WarningIcon />}
                />
              </Box>
              
              {/* Validation Health */}
              <Box mb={2}>
                <Box display="flex" justifyContent="space-between" mb={1}>
                  <Typography variant="body2">Rule Validation</Typography>
                  <Typography variant="body2" fontWeight="bold">
                    {getValidationPercentage().toFixed(1)}%
                  </Typography>
                </Box>
                <LinearProgress 
                  variant="determinate" 
                  value={getValidationPercentage()} 
                  color={getValidationPercentage() > 90 ? 'success' : getValidationPercentage() > 70 ? 'warning' : 'error'}
                  sx={{ height: 8, borderRadius: 4 }}
                />
                <Typography variant="caption" color="textSecondary">
                  {statistics.validRules} valid / {statistics.totalRules} total rules
                </Typography>
              </Box>

              {/* Enabled Rules */}
              <Box mb={2}>
                <Box display="flex" justifyContent="space-between" mb={1}>
                  <Typography variant="body2">Active Rules</Typography>
                  <Typography variant="body2" fontWeight="bold">
                    {getEnabledPercentage().toFixed(1)}%
                  </Typography>
                </Box>
                <LinearProgress 
                  variant="determinate" 
                  value={getEnabledPercentage()} 
                  color={getEnabledPercentage() > 80 ? 'success' : 'info'}
                  sx={{ height: 8, borderRadius: 4 }}
                />
                <Typography variant="caption" color="textSecondary">
                  {statistics.enabledRules} enabled / {statistics.disabledRules} disabled
                </Typography>
              </Box>

              {/* System Load */}
              {healthStatus.systemLoad && (
                <Box mb={2}>
                  <Box display="flex" justifyContent="space-between" mb={1}>
                    <Typography variant="body2">System Load</Typography>
                    <Typography variant="body2" fontWeight="bold">
                      {healthStatus.systemLoad.toFixed(1)}%
                    </Typography>
                  </Box>
                  <LinearProgress 
                    variant="determinate" 
                    value={healthStatus.systemLoad} 
                    color={healthStatus.systemLoad > 80 ? 'error' : healthStatus.systemLoad > 60 ? 'warning' : 'success'}
                    sx={{ height: 8, borderRadius: 4 }}
                  />
                </Box>
              )}
            </Box>

            <Divider sx={{ my: 2 }} />

            {/* Performance Metrics */}
            <Box mb={2}>
              <Typography variant="subtitle2" gutterBottom display="flex" alignItems="center" gap={1}>
                <StatsIcon fontSize="small" />
                Performance Metrics
              </Typography>
              <Grid container spacing={2}>
                <Grid item xs={6}>
                  <Typography variant="caption" color="textSecondary">Avg Execution Time</Typography>
                  <Typography variant="body2" fontWeight="bold">
                    {statistics.averageExecutionTime?.toFixed(2) || 0}ms
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="caption" color="textSecondary">Recent Matches</Typography>
                  <Typography variant="body2" fontWeight="bold" color="warning.main">
                    {statistics.recentMatches || 0}
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="caption" color="textSecondary">Active Scans</Typography>
                  <Typography variant="body2" fontWeight="bold" color="info.main">
                    {healthStatus.activeScans || 0}
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="caption" color="textSecondary">Compilation Errors</Typography>
                  <Typography variant="body2" fontWeight="bold" color="error.main">
                    {statistics.compilationErrors || 0}
                  </Typography>
                </Grid>
              </Grid>
            </Box>

            {/* Top Performing Rule */}
            {statistics.topPerformingRules && statistics.topPerformingRules.length > 0 && (
              <Box mb={2}>
                <Typography variant="subtitle2" gutterBottom display="flex" alignItems="center" gap={1}>
                  <TrendingUpIcon fontSize="small" />
                  Top Performing Rule
                </Typography>
                <Box bgcolor="rgba(76, 175, 80, 0.1)" p={1} borderRadius={1}>
                  <Typography variant="body2" fontWeight="bold">
                    {statistics.topPerformingRules[0].ruleName}
                  </Typography>
                  <Box display="flex" justifyContent="space-between" alignItems="center">
                    <Typography variant="caption" color="textSecondary">
                      {statistics.topPerformingRules[0].hitCount} matches
                    </Typography>
                    <Chip
                      label={`${statistics.topPerformingRules[0].effectivenessScore.toFixed(0)}%`}
                      size="small"
                      color="success"
                    />
                  </Box>
                </Box>
              </Box>
            )}

            {/* Warnings */}
            {healthStatus.warnings && healthStatus.warnings.length > 0 && (
              <Box mb={2}>
                <Typography variant="subtitle2" gutterBottom display="flex" alignItems="center" gap={1}>
                  <WarningIcon fontSize="small" color="warning" />
                  System Warnings
                </Typography>
                {healthStatus.warnings.slice(0, 2).map((warning, index) => (
                  <Box key={index} mb={1}>
                    <Chip 
                      label={warning}
                      size="small"
                      color="warning"
                      variant="outlined"
                      sx={{ maxWidth: '100%' }}
                    />
                  </Box>
                ))}
              </Box>
            )}

            {/* Action Buttons */}
            <Box display="flex" gap={1} flexWrap="wrap">
              <Button 
                size="small" 
                startIcon={<ScanIcon />}
                onClick={() => window.location.href = '#/yara-rules'}
                color="primary"
              >
                Scan
              </Button>
              <Button 
                size="small" 
                startIcon={<AnalyticsIcon />}
                onClick={() => window.location.href = '#/yara-rules'}
                color="info"
              >
                Analytics
              </Button>
              <Button 
                size="small" 
                startIcon={<HealthIcon />}
                onClick={() => window.location.href = '#/yara-rules'}
                color="success"
              >
                Health
              </Button>
            </Box>
          </>
        ) : (
          <Box textAlign="center" py={3}>
            <YaraIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />
            <Typography variant="h6" color="textSecondary" gutterBottom>
              YARA Engine Unavailable
            </Typography>
            <Typography variant="body2" color="textSecondary" gutterBottom>
              Unable to connect to YARA rule engine. Check system status.
            </Typography>
            <Button 
              variant="contained" 
              size="small" 
              onClick={loadYaraData}
              startIcon={<RefreshIcon />}
              sx={{ mt: 1 }}
            >
              Retry Connection
            </Button>
          </Box>
        )}
      </CardContent>
    </Card>
  );
};
