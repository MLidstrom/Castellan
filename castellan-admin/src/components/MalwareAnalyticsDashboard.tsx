import React, { useEffect, useState, useCallback } from 'react';
import {
  useDataProvider,
  useNotify,
  Loading,
} from 'react-admin';
import {
  Card,
  CardContent,
  CardHeader,
  Typography,
  Box,
  Grid,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  Tooltip,
  ButtonGroup,
  Button,
} from '@mui/material';
import {
  PieChart,
  Pie,
  Cell,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip as RechartsTooltip,
  ResponsiveContainer,
  Area,
  AreaChart,
} from 'recharts';
import {
  Refresh as RefreshIcon,
  Assessment as StatsIcon,
  Speed as PerformanceIcon,
  Security as SecurityIcon,
  CheckCircle as ValidIcon,
  Timeline as TimelineIcon,
} from '@mui/icons-material';

interface YaraStatistics {
  totalRules: number;
  enabledRules: number;
  disabledRules: number;
  validRules: number;
  invalidRules: number;
  rulesByCategory: Record<string, number>;
  rulesByThreatLevel: Record<string, number>;
  topPerformingRules: MalwareRulePerformance[];
  slowestRules: MalwareRulePerformance[];
  generatedAt: string;
}

interface MalwareRulePerformance {
  ruleId: string;
  ruleName: string;
  hitCount: number;
  falsePositiveCount: number;
  averageExecutionTimeMs: number;
  effectivenessScore: number;
  lastMatch?: string;
}

interface MalwareMatchAnalytics {
  totalMatches: number;
  trends: MalwareMatchTrend[];
  ruleEffectiveness: MalwareRuleEffectiveness[];
  matchesByCategory: Record<string, number>;
  generatedAt: string;
}

interface MalwareMatchTrend {
  timestamp: string;
  matchCount: number;
  groupBy?: string;
  groupValue?: string;
}

interface MalwareRuleEffectiveness {
  ruleId: string;
  ruleName: string;
  matchCount: number;
  falsePositiveCount: number;
  falsePositiveRate: number;
  effectivenessScore: number;
  lastUsed: string;
}

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D', '#FFC658'];

export const MalwareAnalyticsDashboard: React.FC = React.memo(() => {
  const [statistics, setStatistics] = useState<YaraStatistics | null>(null);
  const [analytics, setAnalytics] = useState<MalwareMatchAnalytics | null>(null);
  const [loading, setLoading] = useState(false);
  const [timeRange, setTimeRange] = useState('7d');
  const [lastRefresh, setLastRefresh] = useState<Date>(new Date());

  const dataProvider = useDataProvider();
  const notify = useNotify();

  const loadData = useCallback(async () => {
    setLoading(true);
    try {
      // Load statistics
      const statsResult = await dataProvider.getOne('yara-rules/statistics', { id: 'stats' });
      setStatistics(statsResult.data.data);

      // Load match analytics
      const analyticsResult = await dataProvider.create('yara-rules/analytics/matches', {
        data: {
          startDate: new Date(Date.now() - (parseInt(timeRange.replace('d', '')) * 24 * 60 * 60 * 1000)).toISOString(),
          endDate: new Date().toISOString(),
          groupBy: 'day',
          limit: 100
        }
      });
      setAnalytics(analyticsResult.data.data);

      setLastRefresh(new Date());
    } catch (error: any) {
      notify(`Failed to load analytics: ${error.message}`, { type: 'error' });
    } finally {
      setLoading(false);
    }
  }, [dataProvider, notify, timeRange]);

  useEffect(() => {
    loadData();
  }, [timeRange, loadData]);

  if (loading && !statistics && !analytics) {
    return <Loading />;
  }

  const getEffectivenessColor = (score: number) => {
    if (score >= 80) return 'success';
    if (score >= 60) return 'info';
    if (score >= 40) return 'warning';
    return 'error';
  };

  const getCategoryChartData = () => {
    if (!statistics?.rulesByCategory) return [];
    return Object.entries(statistics.rulesByCategory).map(([name, value], index) => ({
      name,
      value,
      fill: COLORS[index % COLORS.length]
    }));
  };

  const getThreatLevelChartData = () => {
    if (!statistics?.rulesByThreatLevel) return [];
    const order = ['Critical', 'High', 'Medium', 'Low'];
    return order.map((level, index) => ({
      name: level,
      value: statistics.rulesByThreatLevel[level] || 0,
      fill: level === 'Critical' ? '#FF4444' : 
            level === 'High' ? '#FF8800' :
            level === 'Medium' ? '#FFAA00' : '#44AA44'
    }));
  };

  const getMatchTrendData = () => {
    if (!analytics?.trends) return [];
    return analytics.trends.map(trend => ({
      date: new Date(trend.timestamp).toLocaleDateString(),
      matches: trend.matchCount
    }));
  };

  return (
    <Box sx={{ p: 3 }}>
      {/* Header */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <StatsIcon /> YARA Analytics Dashboard
        </Typography>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
          <ButtonGroup variant="outlined" size="small">
            <Button 
              variant={timeRange === '1d' ? 'contained' : 'outlined'}
              onClick={() => setTimeRange('1d')}
            >
              1D
            </Button>
            <Button 
              variant={timeRange === '7d' ? 'contained' : 'outlined'}
              onClick={() => setTimeRange('7d')}
            >
              7D
            </Button>
            <Button 
              variant={timeRange === '30d' ? 'contained' : 'outlined'}
              onClick={() => setTimeRange('30d')}
            >
              30D
            </Button>
          </ButtonGroup>
          <Tooltip title={`Last updated: ${lastRefresh.toLocaleString()}`}>
            <IconButton onClick={loadData} disabled={loading}>
              <RefreshIcon />
            </IconButton>
          </Tooltip>
        </Box>
      </Box>

      {/* Summary Cards */}
      {statistics && (
        <Grid container spacing={3} sx={{ mb: 3 }}>
          <Grid item xs={12} md={3}>
            <Card>
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <SecurityIcon sx={{ mr: 1, color: 'primary.main' }} />
                  <Typography variant="h6" color="textSecondary">Total Rules</Typography>
                </Box>
                <Typography variant="h3">{statistics.totalRules}</Typography>
                <Typography variant="body2" color="textSecondary">
                  {statistics.enabledRules} enabled â€¢ {statistics.disabledRules} disabled
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} md={3}>
            <Card>
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <ValidIcon sx={{ mr: 1, color: 'success.main' }} />
                  <Typography variant="h6" color="textSecondary">Valid Rules</Typography>
                </Box>
                <Typography variant="h3" color="success.main">
                  {Math.round((statistics.validRules / statistics.totalRules) * 100)}%
                </Typography>
                <Typography variant="body2" color="textSecondary">
                  {statistics.validRules}/{statistics.totalRules} rules valid
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} md={3}>
            <Card>
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <PerformanceIcon sx={{ mr: 1, color: 'info.main' }} />
                  <Typography variant="h6" color="textSecondary">Top Performance</Typography>
                </Box>
                <Typography variant="h3" color="info.main">
                  {statistics.topPerformingRules[0]?.effectivenessScore.toFixed(0) || 0}
                </Typography>
                <Typography variant="body2" color="textSecondary">
                  {statistics.topPerformingRules[0]?.ruleName || 'N/A'}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} md={3}>
            <Card>
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                  <TimelineIcon sx={{ mr: 1, color: 'warning.main' }} />
                  <Typography variant="h6" color="textSecondary">Total Matches</Typography>
                </Box>
                <Typography variant="h3" color="warning.main">
                  {analytics?.totalMatches || 0}
                </Typography>
                <Typography variant="body2" color="textSecondary">
                  Last {timeRange}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      )}

      {/* Charts Row 1 */}
      <Grid container spacing={3} sx={{ mb: 3 }}>
        <Grid item xs={12} md={6}>
          <Card>
            <CardHeader title="Rules by Category" />
            <CardContent>
              <ResponsiveContainer width="100%" height={300}>
                <PieChart>
                  <Pie
                    data={getCategoryChartData()}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    label={({ name, percent }) => `${name} ${percent ? (percent * 100).toFixed(0) : 0}%`}
                    outerRadius={80}
                    fill="#8884d8"
                    dataKey="value"
                  >
                    {getCategoryChartData().map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.fill} />
                    ))}
                  </Pie>
                  <RechartsTooltip />
                </PieChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} md={6}>
          <Card>
            <CardHeader title="Rules by Threat Level" />
            <CardContent>
              <ResponsiveContainer width="100%" height={300}>
                <BarChart data={getThreatLevelChartData()}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis />
                  <RechartsTooltip />
                  <Bar dataKey="value" fill="#8884d8" />
                </BarChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Match Trends Chart */}
      {analytics && (
        <Grid container spacing={3} sx={{ mb: 3 }}>
          <Grid item xs={12}>
            <Card>
              <CardHeader title={`Match Trends - Last ${timeRange.toUpperCase()}`} />
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <AreaChart data={getMatchTrendData()}>
                    <defs>
                      <linearGradient id="matchGradient" x1="0" y1="0" x2="0" y2="1">
                        <stop offset="5%" stopColor="#8884d8" stopOpacity={0.8}/>
                        <stop offset="95%" stopColor="#8884d8" stopOpacity={0}/>
                      </linearGradient>
                    </defs>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="date" />
                    <YAxis />
                    <RechartsTooltip />
                    <Area 
                      type="monotone" 
                      dataKey="matches" 
                      stroke="#8884d8" 
                      fillOpacity={1}
                      fill="url(#matchGradient)" 
                    />
                  </AreaChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      )}

      {/* Performance Tables */}
      <Grid container spacing={3}>
        <Grid item xs={12} md={6}>
          <Card>
            <CardHeader title="Top Performing Rules" />
            <CardContent>
              <TableContainer>
                <Table size="small">
                  <TableHead>
                    <TableRow>
                      <TableCell>Rule Name</TableCell>
                      <TableCell align="right">Effectiveness</TableCell>
                      <TableCell align="right">Matches</TableCell>
                      <TableCell align="right">Avg Time</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {statistics?.topPerformingRules.slice(0, 10).map((rule, index) => (
                      <TableRow key={rule.ruleId}>
                        <TableCell>
                          <Typography variant="body2" noWrap>
                            {rule.ruleName}
                          </Typography>
                        </TableCell>
                        <TableCell align="right">
                          <Chip
                            label={`${rule.effectivenessScore.toFixed(0)}%`}
                            color={getEffectivenessColor(rule.effectivenessScore) as any}
                            size="small"
                          />
                        </TableCell>
                        <TableCell align="right">{rule.hitCount}</TableCell>
                        <TableCell align="right">
                          {rule.averageExecutionTimeMs.toFixed(1)}ms
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} md={6}>
          <Card>
            <CardHeader title="Slowest Rules" />
            <CardContent>
              <TableContainer>
                <Table size="small">
                  <TableHead>
                    <TableRow>
                      <TableCell>Rule Name</TableCell>
                      <TableCell align="right">Execution Time</TableCell>
                      <TableCell align="right">Matches</TableCell>
                      <TableCell align="right">False Positives</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {statistics?.slowestRules.slice(0, 10).map((rule, index) => (
                      <TableRow key={rule.ruleId}>
                        <TableCell>
                          <Typography variant="body2" noWrap>
                            {rule.ruleName}
                          </Typography>
                        </TableCell>
                        <TableCell align="right">
                          <Chip
                            label={`${rule.averageExecutionTimeMs.toFixed(1)}ms`}
                            color={rule.averageExecutionTimeMs > 100 ? 'error' : 
                                   rule.averageExecutionTimeMs > 50 ? 'warning' : 'success'}
                            size="small"
                          />
                        </TableCell>
                        <TableCell align="right">{rule.hitCount}</TableCell>
                        <TableCell align="right">{rule.falsePositiveCount}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Box>
  );
});
