using Castellan.Worker.Models.ThreatIntelligence;

namespace Castellan.Worker.Services.Interfaces;

/// <summary>
/// Interface for MalwareBazaar (Abuse.ch) threat intelligence service
/// </summary>
public interface IMalwareBazaarService
{
    /// <summary>
    /// Query MalwareBazaar for file hash information
    /// </summary>
    /// <param name="fileHash">SHA256 or MD5 hash of the file</param>
    /// <param name="cancellationToken">Cancellation token</param>
    /// <returns>MalwareBazaar analysis result</returns>
    Task<MalwareBazaarResult?> GetHashInfoAsync(string fileHash, CancellationToken cancellationToken = default);

    /// <summary>
    /// Query MalwareBazaar by file signature/family name
    /// </summary>
    /// <param name="signature">Malware signature or family name</param>
    /// <param name="limit">Maximum number of results to return (default: 100)</param>
    /// <param name="cancellationToken">Cancellation token</param>
    /// <returns>List of matching malware samples</returns>
    Task<List<MalwareBazaarResult>> GetBySignatureAsync(string signature, int limit = 100, CancellationToken cancellationToken = default);

    /// <summary>
    /// Query MalwareBazaar by ClamAV signature
    /// </summary>
    /// <param name="clamavSignature">ClamAV signature name</param>
    /// <param name="limit">Maximum number of results to return (default: 100)</param>
    /// <param name="cancellationToken">Cancellation token</param>
    /// <returns>List of matching malware samples</returns>
    Task<List<MalwareBazaarResult>> GetByClamAVAsync(string clamavSignature, int limit = 100, CancellationToken cancellationToken = default);

    /// <summary>
    /// Get recent malware samples from MalwareBazaar
    /// </summary>
    /// <param name="limit">Maximum number of recent samples to return (default: 100)</param>
    /// <param name="cancellationToken">Cancellation token</param>
    /// <returns>List of recent malware samples</returns>
    Task<List<MalwareBazaarResult>> GetRecentSamplesAsync(int limit = 100, CancellationToken cancellationToken = default);

    /// <summary>
    /// Check service health and connectivity
    /// </summary>
    /// <param name="cancellationToken">Cancellation token</param>
    /// <returns>True if service is healthy and accessible</returns>
    Task<bool> IsHealthyAsync(CancellationToken cancellationToken = default);

    /// <summary>
    /// Get current rate limit status
    /// </summary>
    /// <returns>Rate limit information</returns>
    Task<RateLimitStatus> GetRateLimitStatusAsync();

    /// <summary>
    /// Clear cached results for a specific hash
    /// </summary>
    /// <param name="fileHash">Hash to clear from cache</param>
    void ClearCache(string fileHash);

    /// <summary>
    /// Clear all cached results
    /// </summary>
    void ClearAllCache();
}
