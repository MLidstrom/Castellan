// <auto-generated />
using System;
using Castellan.Worker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Castellan.Worker.Migrations
{
    [DbContext(typeof(CastellanDbContext))]
    partial class CastellanDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Castellan.Worker.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("RiskScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityProfile")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Castellan.Worker.Models.ApplicationMitreAssociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Confidence")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("TechniqueId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TechniqueId");

                    b.HasIndex("ApplicationId", "TechniqueId")
                        .IsUnique();

                    b.ToTable("ApplicationMitreAssociations");
                });

            modelBuilder.Entity("Castellan.Worker.Models.Chat.ChatMessage", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Citations")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Intent")
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SuggestedActions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Visualizations")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("Role");

                    b.HasIndex("Timestamp");

                    b.HasIndex("ConversationId", "Timestamp")
                        .HasDatabaseName("IX_ChatMessages_ConversationTime");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Castellan.Worker.Models.Chat.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FeedbackComment")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsArchived");

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "UpdatedAt")
                        .HasDatabaseName("IX_Conversations_UserUpdated");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("Castellan.Worker.Models.CloudSecurityEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientAppUsed")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserPrincipalName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CloudSecurityEvents");
                });

            modelBuilder.Entity("Castellan.Worker.Models.EventLogBookmarkEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("BookmarkData")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChannelName")
                        .IsUnique();

                    b.HasIndex("UpdatedAt");

                    b.ToTable("EventLogBookmarks");
                });

            modelBuilder.Entity("Castellan.Worker.Models.MalwareMatch", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("ExecutionTimeMs")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("MatchTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MatchedStrings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RuleId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityEventId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetFile")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MatchTime");

                    b.HasIndex("RuleId");

                    b.HasIndex("TargetHash");

                    b.HasIndex("RuleId", "MatchTime")
                        .HasDatabaseName("IX_MalwareMatches_RuleTime");

                    b.ToTable("MalwareMatches");
                });

            modelBuilder.Entity("Castellan.Worker.Models.MalwareRule", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<double>("AverageExecutionTimeMs")
                        .HasColumnType("REAL");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("FalsePositiveCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HitCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsValid")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastValidated")
                        .HasColumnType("TEXT");

                    b.Property<string>("MitreTechniques")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("PreviousVersion")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RuleContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("TestResult")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestSample")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThreatLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValidationError")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsEnabled");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("IsEnabled", "Category")
                        .HasDatabaseName("IX_MalwareRules_EnabledCategory");

                    b.ToTable("MalwareRules");
                });

            modelBuilder.Entity("Castellan.Worker.Models.MitreTechnique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataSources")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Examples")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mitigations")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Platform")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tactic")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TechniqueId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TechniqueId")
                        .IsUnique();

                    b.ToTable("MitreTechniques");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 16, 13, 32, 25, 196, DateTimeKind.Utc).AddTicks(6651),
                            Description = "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges.",
                            Name = "Process Injection",
                            Platform = "Windows, macOS, Linux",
                            Tactic = "Defense Evasion",
                            TechniqueId = "T1055"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 16, 13, 32, 25, 196, DateTimeKind.Utc).AddTicks(6654),
                            Description = "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries.",
                            Name = "Command and Scripting Interpreter",
                            Platform = "Windows, macOS, Linux",
                            Tactic = "Execution",
                            TechniqueId = "T1059"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 16, 13, 32, 25, 196, DateTimeKind.Utc).AddTicks(6656),
                            Description = "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system.",
                            Name = "File and Directory Discovery",
                            Platform = "Windows, macOS, Linux",
                            Tactic = "Discovery",
                            TechniqueId = "T1083"
                        });
                });

            modelBuilder.Entity("Castellan.Worker.Models.SavedSearchEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchFilters")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UseCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("LastUsedAt");

                    b.HasIndex("Name");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_SavedSearches_UserName");

                    b.ToTable("SavedSearches");
                });

            modelBuilder.Entity("Castellan.Worker.Models.SearchHistoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExecutionTimeMs")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ResultCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SearchFilters")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SearchHash");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "CreatedAt")
                        .HasDatabaseName("IX_SearchHistory_UserTime");

                    b.HasIndex("UserId", "SearchHash")
                        .HasDatabaseName("IX_SearchHistory_UserHash");

                    b.ToTable("SearchHistory");
                });

            modelBuilder.Entity("Castellan.Worker.Models.SecurityEventEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AnomalyScore")
                        .HasColumnType("REAL");

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("BurstScore")
                        .HasColumnType("REAL");

                    b.Property<double>("Confidence")
                        .HasColumnType("REAL");

                    b.Property<string>("CorrelationContext")
                        .HasColumnType("TEXT");

                    b.Property<string>("CorrelationIds")
                        .HasColumnType("TEXT");

                    b.Property<double>("CorrelationScore")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DestinationIp")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<string>("EnrichmentData")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventData")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCorrelationBased")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeterministic")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnhanced")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("MitreTechniques")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecommendedActions")
                        .HasColumnType("TEXT");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_SecurityEvents_CreatedAt");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("EventType");

                    b.HasIndex("RiskLevel");

                    b.HasIndex("Severity");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Confidence", "CorrelationScore")
                        .HasDatabaseName("IX_SecurityEvents_ConfidenceCorrelation");

                    b.HasIndex("EventType", "Timestamp")
                        .HasDatabaseName("IX_SecurityEvents_EventTypeTimestamp");

                    b.HasIndex("RiskLevel", "Timestamp")
                        .HasDatabaseName("IX_SecurityEvents_RiskTimestamp");

                    b.HasIndex("Timestamp", "RiskLevel", "EventType")
                        .HasDatabaseName("IX_SecurityEvents_TimestampRiskEvent");

                    b.ToTable("SecurityEvents");
                });

            modelBuilder.Entity("Castellan.Worker.Models.SecurityEventRuleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Confidence")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MitreTechniques")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecommendedActions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventType");

                    b.HasIndex("IsEnabled");

                    b.HasIndex("EventId", "Channel")
                        .HasDatabaseName("IX_SecurityEventRules_EventChannel");

                    b.HasIndex("IsEnabled", "Priority")
                        .HasDatabaseName("IX_SecurityEventRules_EnabledPriority");

                    b.ToTable("SecurityEventRules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Channel = "Security",
                            Confidence = 85,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4624,
                            EventType = "AuthenticationSuccess",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1078\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Monitor for unusual logon patterns\",\"Verify user identity\"]",
                            RiskLevel = "medium",
                            Summary = "Successful logon",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            Channel = "Security",
                            Confidence = 90,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4625,
                            EventType = "AuthenticationFailure",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1110\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Investigate failed logon source\",\"Check for brute force attempts\",\"Review account lockout policies\"]",
                            RiskLevel = "high",
                            Summary = "Failed logon attempt",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            Channel = "Security",
                            Confidence = 75,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4672,
                            EventType = "PrivilegeEscalation",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1068\",\"T1078\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Investigate privilege assignment\",\"Verify administrative approval\",\"Monitor for abuse\"]",
                            RiskLevel = "medium",
                            Summary = "Special privileges assigned to new logon",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            Channel = "Security",
                            Confidence = 80,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4688,
                            EventType = "ProcessCreation",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1055\",\"T1059\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Review process parent-child relationships\",\"Check for suspicious command lines\"]",
                            RiskLevel = "medium",
                            Summary = "Process creation",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            Channel = "Security",
                            Confidence = 90,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4720,
                            EventType = "AccountManagement",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1136\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Verify account creation approval\",\"Review new account permissions\",\"Monitor for unauthorized accounts\"]",
                            RiskLevel = "high",
                            Summary = "Account created",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6,
                            Channel = "Security",
                            Confidence = 90,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4722,
                            EventType = "AccountManagement",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1078\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Verify account enablement approval\",\"Review account status changes\"]",
                            RiskLevel = "high",
                            Summary = "Account enabled",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 7,
                            Channel = "Security",
                            Confidence = 90,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4724,
                            EventType = "AccountManagement",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1098\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Verify password reset approval\",\"Check for unauthorized password changes\"]",
                            RiskLevel = "high",
                            Summary = "Account password reset",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 8,
                            Channel = "Security",
                            Confidence = 95,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4728,
                            EventType = "PrivilegeEscalation",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1068\",\"T1098\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Investigate group membership changes\",\"Verify administrative approval\",\"Review group permissions\"]",
                            RiskLevel = "critical",
                            Summary = "Member added to security-enabled global group",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 9,
                            Channel = "Security",
                            Confidence = 95,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4732,
                            EventType = "PrivilegeEscalation",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1068\",\"T1098\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Investigate local group changes\",\"Verify administrative approval\",\"Monitor for privilege escalation\"]",
                            RiskLevel = "critical",
                            Summary = "Member added to security-enabled local group",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 10,
                            Channel = "Security",
                            Confidence = 85,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 7045,
                            EventType = "ServiceInstallation",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1543\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Verify service installation approval\",\"Review service permissions\",\"Check for persistence mechanisms\"]",
                            RiskLevel = "high",
                            Summary = "Service installed",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 11,
                            Channel = "Security",
                            Confidence = 85,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4697,
                            EventType = "ServiceInstallation",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1543\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Verify service installation approval\",\"Review service configuration\",\"Monitor for unauthorized services\"]",
                            RiskLevel = "high",
                            Summary = "Service installed",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 12,
                            Channel = "Security",
                            Confidence = 75,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4698,
                            EventType = "ScheduledTask",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1053\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Review scheduled task configuration\",\"Verify task approval\",\"Monitor for persistence\"]",
                            RiskLevel = "medium",
                            Summary = "Scheduled task created",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 13,
                            Channel = "Security",
                            Confidence = 75,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4700,
                            EventType = "ScheduledTask",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1053\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Review enabled scheduled tasks\",\"Verify task approval\"]",
                            RiskLevel = "medium",
                            Summary = "Scheduled task enabled",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 14,
                            Channel = "Security",
                            Confidence = 60,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 6005,
                            EventType = "SystemStartup",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1078\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Verify system startup\",\"Review startup sequence\"]",
                            RiskLevel = "low",
                            Summary = "Event log service was started",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 15,
                            Channel = "Security",
                            Confidence = 60,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 6006,
                            EventType = "SystemShutdown",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1078\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Verify system shutdown\",\"Review shutdown sequence\"]",
                            RiskLevel = "low",
                            Summary = "Event log service was stopped",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 16,
                            Channel = "Security",
                            Confidence = 85,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4719,
                            EventType = "SecurityPolicyChange",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1562\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Investigate audit policy changes\",\"Verify administrative approval\",\"Review logging configuration\"]",
                            RiskLevel = "high",
                            Summary = "System audit policy was changed",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 17,
                            Channel = "Security",
                            Confidence = 85,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4902,
                            EventType = "SecurityPolicyChange",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1562\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Review audit policy changes\",\"Verify policy modifications\"]",
                            RiskLevel = "high",
                            Summary = "Per-user audit policy table was created",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 18,
                            Channel = "Security",
                            Confidence = 85,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4904,
                            EventType = "SecurityPolicyChange",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1562\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Investigate event source registration\",\"Verify administrative approval\"]",
                            RiskLevel = "high",
                            Summary = "Security event source registration attempt",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 19,
                            Channel = "Security",
                            Confidence = 85,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4905,
                            EventType = "SecurityPolicyChange",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1562\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Investigate event source unregistration\",\"Verify administrative approval\"]",
                            RiskLevel = "high",
                            Summary = "Security event source unregistration attempt",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 20,
                            Channel = "Security",
                            Confidence = 85,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4907,
                            EventType = "SecurityPolicyChange",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1562\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Investigate audit setting changes\",\"Verify administrative approval\"]",
                            RiskLevel = "high",
                            Summary = "Audit settings on object were changed",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 21,
                            Channel = "Security",
                            Confidence = 85,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4908,
                            EventType = "SecurityPolicyChange",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1562\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Investigate special groups changes\",\"Verify administrative approval\"]",
                            RiskLevel = "high",
                            Summary = "Special Groups Logon table modified",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 22,
                            Channel = "Security",
                            Confidence = 95,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 1102,
                            EventType = "SecurityPolicyChange",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1070\",\"T1562\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Investigate log clearing\",\"Verify administrative approval\",\"Check for anti-forensics activity\"]",
                            RiskLevel = "critical",
                            Summary = "Audit log was cleared",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 23,
                            Channel = "Security",
                            Confidence = 70,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 5156,
                            EventType = "NetworkConnection",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1071\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Review network connections\",\"Check for suspicious traffic patterns\"]",
                            RiskLevel = "medium",
                            Summary = "Filtering Platform connection",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 24,
                            Channel = "Security",
                            Confidence = 70,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 5157,
                            EventType = "NetworkConnection",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1071\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Review blocked connections\",\"Check firewall rules\"]",
                            RiskLevel = "medium",
                            Summary = "Filtering Platform connection blocked",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 25,
                            Channel = "Microsoft-Windows-PowerShell/Operational",
                            Confidence = 80,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4104,
                            EventType = "PowerShellExecution",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1059.001\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Review PowerShell script content\",\"Check for malicious commands\",\"Analyze script block patterns\"]",
                            RiskLevel = "medium",
                            Summary = "PowerShell script block execution",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 26,
                            Channel = "Microsoft-Windows-PowerShell/Operational",
                            Confidence = 60,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4103,
                            EventType = "PowerShellExecution",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1059.001\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Review loaded PowerShell modules\",\"Check for suspicious module usage\"]",
                            RiskLevel = "low",
                            Summary = "PowerShell module logging",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 27,
                            Channel = "Microsoft-Windows-PowerShell/Operational",
                            Confidence = 70,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4105,
                            EventType = "PowerShellExecution",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1059.001\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Review PowerShell pipeline activity\",\"Monitor for unusual execution patterns\"]",
                            RiskLevel = "medium",
                            Summary = "PowerShell pipeline execution started",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 28,
                            Channel = "Microsoft-Windows-PowerShell/Operational",
                            Confidence = 70,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4106,
                            EventType = "PowerShellExecution",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1059.001\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Correlate with pipeline start events\",\"Review execution duration\"]",
                            RiskLevel = "medium",
                            Summary = "PowerShell pipeline execution stopped",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 29,
                            Channel = "Microsoft-Windows-PowerShell/Operational",
                            Confidence = 50,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4100,
                            EventType = "PowerShellExecution",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1059.001\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Monitor provider activity\",\"Review provider security\"]",
                            RiskLevel = "low",
                            Summary = "PowerShell provider started",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 30,
                            Channel = "Microsoft-Windows-PowerShell/Operational",
                            Confidence = 50,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4101,
                            EventType = "PowerShellExecution",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1059.001\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Correlate with provider start events\"]",
                            RiskLevel = "low",
                            Summary = "PowerShell provider stopped",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 31,
                            Channel = "Microsoft-Windows-PowerShell/Operational",
                            Confidence = 65,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 4102,
                            EventType = "PowerShellExecution",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1059.001\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Investigate command health issues\",\"Review PowerShell security policies\"]",
                            RiskLevel = "medium",
                            Summary = "PowerShell command health violation",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 32,
                            Channel = "Microsoft-Windows-PowerShell/Operational",
                            Confidence = 55,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 400,
                            EventType = "PowerShellExecution",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1059.001\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Monitor PowerShell engine lifecycle\",\"Review engine configuration\"]",
                            RiskLevel = "low",
                            Summary = "PowerShell engine state changed",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 33,
                            Channel = "Microsoft-Windows-PowerShell/Operational",
                            Confidence = 55,
                            CreatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EventId = 403,
                            EventType = "PowerShellExecution",
                            IsEnabled = true,
                            MitreTechniques = "[\"T1059.001\"]",
                            ModifiedBy = "System",
                            Priority = 100,
                            RecommendedActions = "[\"Correlate with engine start events\",\"Review engine activity\"]",
                            RiskLevel = "low",
                            Summary = "PowerShell engine stopped",
                            UpdatedAt = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Castellan.Worker.Models.SystemConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("SystemConfiguration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Current database schema version",
                            Key = "DatabaseVersion",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 32, 25, 196, DateTimeKind.Utc).AddTicks(6939),
                            Value = "1.0.0"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Last date MITRE ATT&CK data was updated",
                            Key = "LastMitreUpdate",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 32, 25, 196, DateTimeKind.Utc).AddTicks(7133),
                            Value = "2025-10-16"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Last date YARA rules were fetched and updated",
                            Key = "LastMalwareRulesUpdate",
                            UpdatedAt = new DateTime(2025, 10, 16, 13, 32, 25, 196, DateTimeKind.Utc).AddTicks(7135),
                            Value = "1970-01-01"
                        });
                });

            modelBuilder.Entity("Castellan.Worker.Models.ThreatScanHistoryEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("BackdoorsDetected")
                        .HasColumnType("INTEGER");

                    b.Property<long>("BytesScanned")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DirectoriesScanned")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Duration")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<int>("FilesScanned")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MalwareDetected")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ScanPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("ScanType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<int>("SuspiciousFiles")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ThreatsFound")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ThreatScanHistory");
                });

            modelBuilder.Entity("Castellan.Worker.Models.ApplicationMitreAssociation", b =>
                {
                    b.HasOne("Castellan.Worker.Models.Application", "Application")
                        .WithMany("MitreAssociations")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Castellan.Worker.Models.MitreTechnique", "MitreTechnique")
                        .WithMany("ApplicationAssociations")
                        .HasForeignKey("TechniqueId")
                        .HasPrincipalKey("TechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MitreTechnique");
                });

            modelBuilder.Entity("Castellan.Worker.Models.Chat.ChatMessage", b =>
                {
                    b.HasOne("Castellan.Worker.Models.Chat.Conversation", null)
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Castellan.Worker.Models.SecurityEventEntity", b =>
                {
                    b.HasOne("Castellan.Worker.Models.Application", "Application")
                        .WithMany("SecurityEvents")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Castellan.Worker.Models.Application", b =>
                {
                    b.Navigation("MitreAssociations");

                    b.Navigation("SecurityEvents");
                });

            modelBuilder.Entity("Castellan.Worker.Models.Chat.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Castellan.Worker.Models.MitreTechnique", b =>
                {
                    b.Navigation("ApplicationAssociations");
                });
#pragma warning restore 612, 618
        }
    }
}
