// <auto-generated />
using System;
using Castellan.Worker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Castellan.Worker.Migrations
{
    [DbContext(typeof(CastellanDbContext))]
    [Migration("20250915134926_AddSearchManagement")]
    partial class AddSearchManagement
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Castellan.Worker.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("RiskScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityProfile")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Castellan.Worker.Models.ApplicationMitreAssociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApplicationId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Confidence")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("TechniqueId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TechniqueId");

                    b.HasIndex("ApplicationId", "TechniqueId")
                        .IsUnique();

                    b.ToTable("ApplicationMitreAssociations");
                });

            modelBuilder.Entity("Castellan.Worker.Models.CloudSecurityEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientAppUsed")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserPrincipalName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CloudSecurityEvents");
                });

            modelBuilder.Entity("Castellan.Worker.Models.MitreTechnique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataSources")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Examples")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mitigations")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Platform")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tactic")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("TechniqueId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TechniqueId")
                        .IsUnique();

                    b.ToTable("MitreTechniques");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 15, 13, 49, 25, 518, DateTimeKind.Utc).AddTicks(8909),
                            Description = "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges.",
                            Name = "Process Injection",
                            Platform = "Windows, macOS, Linux",
                            Tactic = "Defense Evasion",
                            TechniqueId = "T1055"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 15, 13, 49, 25, 518, DateTimeKind.Utc).AddTicks(8912),
                            Description = "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries.",
                            Name = "Command and Scripting Interpreter",
                            Platform = "Windows, macOS, Linux",
                            Tactic = "Execution",
                            TechniqueId = "T1059"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 9, 15, 13, 49, 25, 518, DateTimeKind.Utc).AddTicks(8914),
                            Description = "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system.",
                            Name = "File and Directory Discovery",
                            Platform = "Windows, macOS, Linux",
                            Tactic = "Discovery",
                            TechniqueId = "T1083"
                        });
                });

            modelBuilder.Entity("Castellan.Worker.Models.SavedSearchEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchFilters")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UseCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("LastUsedAt");

                    b.HasIndex("Name");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_SavedSearches_UserName");

                    b.ToTable("SavedSearches");
                });

            modelBuilder.Entity("Castellan.Worker.Models.SearchHistoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ExecutionTimeMs")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ResultCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SearchFilters")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SearchHash");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "CreatedAt")
                        .HasDatabaseName("IX_SearchHistory_UserTime");

                    b.HasIndex("UserId", "SearchHash")
                        .HasDatabaseName("IX_SearchHistory_UserHash");

                    b.ToTable("SearchHistory");
                });

            modelBuilder.Entity("Castellan.Worker.Models.SecurityEventEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AnomalyScore")
                        .HasColumnType("REAL");

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("BurstScore")
                        .HasColumnType("REAL");

                    b.Property<double>("Confidence")
                        .HasColumnType("REAL");

                    b.Property<double>("CorrelationScore")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DestinationIp")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<string>("EnrichmentData")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventData")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCorrelationBased")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeterministic")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnhanced")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("MitreTechniques")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecommendedActions")
                        .HasColumnType("TEXT");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceIp")
                        .HasMaxLength(45)
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_SecurityEvents_CreatedAt");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("EventType");

                    b.HasIndex("RiskLevel");

                    b.HasIndex("Severity");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Confidence", "CorrelationScore")
                        .HasDatabaseName("IX_SecurityEvents_ConfidenceCorrelation");

                    b.HasIndex("EventType", "Timestamp")
                        .HasDatabaseName("IX_SecurityEvents_EventTypeTimestamp");

                    b.HasIndex("RiskLevel", "Timestamp")
                        .HasDatabaseName("IX_SecurityEvents_RiskTimestamp");

                    b.HasIndex("Timestamp", "RiskLevel", "EventType")
                        .HasDatabaseName("IX_SecurityEvents_TimestampRiskEvent");

                    b.ToTable("SecurityEvents");
                });

            modelBuilder.Entity("Castellan.Worker.Models.SystemConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("SystemConfiguration");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Current database schema version",
                            Key = "DatabaseVersion",
                            UpdatedAt = new DateTime(2025, 9, 15, 13, 49, 25, 518, DateTimeKind.Utc).AddTicks(9091),
                            Value = "1.0.0"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Last date MITRE ATT&CK data was updated",
                            Key = "LastMitreUpdate",
                            UpdatedAt = new DateTime(2025, 9, 15, 13, 49, 25, 518, DateTimeKind.Utc).AddTicks(9201),
                            Value = "2025-09-15"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Last date YARA rules were fetched and updated",
                            Key = "LastYaraRulesUpdate",
                            UpdatedAt = new DateTime(2025, 9, 15, 13, 49, 25, 518, DateTimeKind.Utc).AddTicks(9202),
                            Value = "1970-01-01"
                        });
                });

            modelBuilder.Entity("Castellan.Worker.Models.YaraMatch", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<double>("ExecutionTimeMs")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("MatchTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("MatchedStrings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RuleId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityEventId")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetFile")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MatchTime");

                    b.HasIndex("RuleId");

                    b.HasIndex("TargetHash");

                    b.HasIndex("RuleId", "MatchTime")
                        .HasDatabaseName("IX_YaraMatches_RuleTime");

                    b.ToTable("YaraMatches");
                });

            modelBuilder.Entity("Castellan.Worker.Models.YaraRule", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<double>("AverageExecutionTimeMs")
                        .HasColumnType("REAL");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("FalsePositiveCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HitCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsValid")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastValidated")
                        .HasColumnType("TEXT");

                    b.Property<string>("MitreTechniques")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("PreviousVersion")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RuleContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("TestResult")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TestSample")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThreatLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValidationError")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsEnabled");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UpdatedAt");

                    b.HasIndex("IsEnabled", "Category")
                        .HasDatabaseName("IX_YaraRules_EnabledCategory");

                    b.ToTable("YaraRules");
                });

            modelBuilder.Entity("Castellan.Worker.Models.ApplicationMitreAssociation", b =>
                {
                    b.HasOne("Castellan.Worker.Models.Application", "Application")
                        .WithMany("MitreAssociations")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Castellan.Worker.Models.MitreTechnique", "MitreTechnique")
                        .WithMany("ApplicationAssociations")
                        .HasForeignKey("TechniqueId")
                        .HasPrincipalKey("TechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("MitreTechnique");
                });

            modelBuilder.Entity("Castellan.Worker.Models.SecurityEventEntity", b =>
                {
                    b.HasOne("Castellan.Worker.Models.Application", "Application")
                        .WithMany("SecurityEvents")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Application");
                });

            modelBuilder.Entity("Castellan.Worker.Models.Application", b =>
                {
                    b.Navigation("MitreAssociations");

                    b.Navigation("SecurityEvents");
                });

            modelBuilder.Entity("Castellan.Worker.Models.MitreTechnique", b =>
                {
                    b.Navigation("ApplicationAssociations");
                });
#pragma warning restore 612, 618
        }
    }
}
