# ============================================================================
# CastellanAI Dashboard - Environment Variables
# ============================================================================
#
# This file documents all available environment variables for the dashboard.
# Copy this file to `.env` or `.env.local` and update with your values.
#
# IMPORTANT:
# - Environment variables must be prefixed with `VITE_` to be exposed to the client
# - Never commit `.env` or `.env.local` files (they may contain secrets)
# - Use `.env.example` for documentation only
#
# File Hierarchy (from lowest to highest priority):
# 1. .env                   - Default values for all environments
# 2. .env.local             - Local overrides (gitignored)
# 3. .env.[mode]            - Environment-specific (.env.production, .env.development)
# 4. .env.[mode].local      - Local environment-specific overrides (gitignored)
#
# ============================================================================

# ----------------------------------------------------------------------------
# API Configuration
# ----------------------------------------------------------------------------

# Base URL for API requests
# Development: Uses Vite proxy (/api -> http://localhost:5000/api)
# Production: Set to your production API URL
#
# Examples:
# VITE_API_URL=/api                               # Same-origin (default)
# VITE_API_URL=https://api.yourdomain.com/api     # External API
# VITE_API_URL=http://localhost:5000/api          # Direct local API
#
VITE_API_URL=

# ----------------------------------------------------------------------------
# SignalR Configuration
# ----------------------------------------------------------------------------

# Base URL for SignalR hub connections
# SignalR WebSocket connections cannot use Vite proxy, so full URLs are required.
#
# Development: http://localhost:5000/hubs (default)
# Production: Set to your production SignalR URL
#
# Examples:
# VITE_SIGNALR_URL=http://localhost:5000/hubs              # Local development
# VITE_SIGNALR_URL=https://api.yourdomain.com/hubs         # Production
# VITE_SIGNALR_URL=wss://api.yourdomain.com/hubs           # Secure WebSocket
#
VITE_SIGNALR_URL=

# SignalR Hub Path/Name
# The specific hub endpoint to connect to.
# Default: 'scan-progress'
#
# Examples:
# VITE_SIGNALR_HUB=scan-progress    # Threat scanner updates hub
# VITE_SIGNALR_HUB=notifications    # Notifications hub
#
VITE_SIGNALR_HUB=

# ----------------------------------------------------------------------------
# Development Configuration
# ----------------------------------------------------------------------------

# Enable/disable specific features during development
# These are typically controlled by code, but can be overridden here for testing

# Enable debug mode (additional console logging)
# VITE_DEBUG=true

# Enable React DevTools profiler
# VITE_PROFILER=true

# ----------------------------------------------------------------------------
# Production Configuration Examples
# ----------------------------------------------------------------------------

# Example production .env.production file:
#
# VITE_API_URL=https://api.castellan.yourdomain.com/api
# VITE_SIGNALR_URL=wss://api.castellan.yourdomain.com/hubs
# VITE_SIGNALR_HUB=scan-progress

# ----------------------------------------------------------------------------
# Local Development Examples
# ----------------------------------------------------------------------------

# Example local override .env.local file:
#
# # Use different API port for local testing
# VITE_API_URL=http://localhost:8080/api
# VITE_SIGNALR_URL=http://localhost:8080/hubs
#
# # Enable debugging
# VITE_DEBUG=true

# ----------------------------------------------------------------------------
# Docker/Container Examples
# ----------------------------------------------------------------------------

# When running in Docker, use container service names:
#
# VITE_API_URL=http://castellan-worker:5000/api
# VITE_SIGNALR_URL=ws://castellan-worker:5000/hubs

# ----------------------------------------------------------------------------
# Reverse Proxy Examples
# ----------------------------------------------------------------------------

# When using Nginx/Apache reverse proxy:
#
# # Same-origin requests (proxy handles routing)
# VITE_API_URL=/api
# VITE_SIGNALR_URL=/hubs
#
# # Nginx config example:
# # location /api {
# #     proxy_pass http://localhost:5000/api;
# # }
# # location /hubs {
# #     proxy_pass http://localhost:5000/hubs;
# #     proxy_http_version 1.1;
# #     proxy_set_header Upgrade $http_upgrade;
# #     proxy_set_header Connection "upgrade";
# # }

# ----------------------------------------------------------------------------
# Troubleshooting
# ----------------------------------------------------------------------------

# If you encounter CORS errors:
# - Ensure VITE_API_URL matches your backend CORS configuration
# - For development, use Vite proxy (VITE_API_URL=/api)
# - For production, configure CORS on backend to allow your domain

# If SignalR connection fails:
# - Check VITE_SIGNALR_URL is accessible from browser
# - Verify WebSocket protocol (ws:// or wss://)
# - Check browser console for connection errors
# - Ensure backend SignalR hub is running and accessible

# If environment variables are not loaded:
# - Restart Vite dev server (environment variables are loaded at startup)
# - Check variable names are prefixed with VITE_
# - Verify .env file is in dashboard/ directory (same level as package.json)

# ----------------------------------------------------------------------------
# Security Notes
# ----------------------------------------------------------------------------

# WARNING: Environment variables prefixed with VITE_ are exposed to the client.
# Never put secrets, API keys, or sensitive data in VITE_ variables.
#
# ✅ Safe:
# - Public API URLs
# - Feature flags
# - Public configuration
#
# ❌ Unsafe:
# - API keys
# - Database credentials
# - Secret tokens
# - Private keys
#
# Backend secrets should be configured in the Worker service (appsettings.json),
# not in the dashboard environment variables.
